// Adding Program.cs + StartUp.cs 

file to class 


------------------------2-------------------------
creating out first entity data-type
AppUser{

}

Introduction to Entity Framework 
An Object Relational Mapper(ORM)
Translates our code into SQL commands that update out tables in the database

AppUser ---------- 
DbContext.Users.Add(new User {id= 4, name = Jhon}) ---------- SQL ------- INSERT INTO Users (id, Name) VALUES (4, John);

Features of Entity Framework
-Querying, change tracking, saving, concurrency, transactions, 
-caching, built-in conventions, configurations, migrations

Adding EF code
Microsoft.EntityFrameworkCore


dotnet tool install --global dotnet-ef

Microsoft.EntityFrameworkCore.Design


dotnet ef migrations add <name>
dotnet ef migrations list
dotnet ef migrations script
dotnet ef dbcontext info
dotnet ef dbcontext scaffold
dotnet ef database drop
dotnet ef database update



// Create first database
dotnet ef migrations add InitialCreate -o Migrations



// Add two entity in AppUser(stop dotnet then run this command)
dotnet ef migrations add AddPassword 



Microsoft.AspNetCore.Authentication.JwtBearer by Microsoft ()


Routing create some 

Update seed data: dotnet watch run

 public class Seed
    {
       public static async Task SeedUsers(DataContext context)
       {
           if(await context.Users.AnyAsync()) return;

           var userData = await System.IO.File.ReadAllTextAsync("Data/UserSeedData.json");
           var users = JsonSerializer.Deserialize<List<AppUser>>(userData);

           foreach(var user in users){
               using var hmac = new HMACSHA512();
               user.UserName = user.UserName.ToLower();
               user.passwordHash = hmac.ComputeHash(Encoding.UTF8.GetBytes("12345678"));
               user.passwordSalt = hmac.Key;

               AppUser  _user = user;
               context.Add(_user);
           }

           await context.SaveChangesAsync();

        }
    }

 // In program.cs 
 public static async Task Main(string[] args)
        {
            var host = CreateHostBuilder(args).Build();
            using var scope = host.Services.CreateAsyncScope();
            var services = scope.ServiceProvider;
            try{
                var context = services.GetRequiredService<DataContext>();
                await context.Database.MigrateAsync();
                await Seed.SeedUsers(context);
                
            }catch(Exception ex){
               var logger = services.GetRequiredService<ILogger<Program>>();
               logger.LogError(ex, "An Error");
            }
            await host.RunAsync();
        }
dotnet watch run

// AutoMapper
AutoMapper.Extensions.Microsoft.Dependenc


// Section: 15
More many to many relationship
using query params in angular
using route resolvers in angular










** SignalR 
Create a SignalR folder 
-- Create a first hab

namespace API.SignalR
{
    [Authorize]
    public class PersenceHub : Hub
    {
        public override async Task OnConnectedAsync()
        {
            await Clients.Others.SendAsync("UserIsOnline", Context.User.GetUserName());
        }

        public override async Task OnDisconnectedAsync(Exception? exception)
        {
            await Clients.Others.SendAsync("UserIsOFfline", Context.User.GetUserName());
            await base.OnDisconnectedAsync(exception);
        }
    }
}


// In startup.cs
 services.AddSignalR();

 app.UseCors(x => x.AllowAnyHeader()
                    .AllowCredentials()
                    .AllowAnyMethod().AllowAnyOrigin());
 
 // router endpoints after Controller-endpoints
 endpoints.MapHub<PersenceHub>("hubs/presence");


  // add query Authentication 
options.Events = new JwtBearerEvents 
{
    OnMessageReceived = context =>{
        var accessToken = context.Request.Query["access_token"];
        var path = context.HttpContext.Request.Path;
                            
        if(!string.IsNullOrEmpty(accessToken) && 
            path.StartsWithSegments("/hubs")){
            context.Token = accessToken;
        }

        return Task.CompletedTask;
    }
};